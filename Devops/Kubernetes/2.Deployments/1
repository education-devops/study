#для локального запуска
minikube docker-env
eval $(minikube -p minikube docker-env)

#в последующем нужно добавить в yaml файле под image 
imagePullPolicy: Never

#Переброска портов с локальной сети
sudo sysctl -w net.ipv4.conf.all.route_localnet=1
sudo iptables -t nat -A PREROUTING -i enp1s0 -p tcp -m tcp --dport 7788 -j DNAT --to-destination 127.0.0.1:7788
#------------------------------------------------------------
kubectl pods
kubectl get nodes
kubectl get deploy
kubectl create deployment test-deployment --image adv4000/k8sphp:latest
kubectl get deploy

kubectl get pods
kubectl describe pods test-deployment-bf4686cbf-hhtpb

kubectl get deploy
kubectl describe deploy test-deployment

kubectl scale deployment test-deployment --replicas 4
kubectl get pods
kubectl get deploy
kubectl get rs

kubectl get pods
kubectl delete pods test-deployment-bf4686cbf-68trm
kubectl get pods

kubectl autoscale deployment test-deployment --min=4 --max=6 --cpu-percent=80
kubectl get pods
kubectl get deploy
kubectl get hpa

kubectl rollout history deployment/test-deployment
kubectl rollout status deployment/test-deployment
kubectl describe deployment test-deployment

kubectl set image deployment/test-deployment k8sphp=adv4000/k8sphp:version1 --record
kubectl rollout status deployment/test-deployment
kubectl rollout history deployment/test-deployment
kubectl describe deployment test-deployment

kubectl set image deployment/test-deployment k8sphp=adv4000/k8sphp:version2 --record
kubectl rollout status deployment/test-deployment
kubectl rollout history deployment/test-deployment
kubectl describe deployment test-deployment

kubectl rollout undo deployment/test-deployment
kubectl rollout status deployment/test-deployment
kubectl rollout history deployment/test-deployment

kubectl set image deployment/test-deployment k8sphp=adv4000/k8sphp:latest --record
kubectl rollout status deployment/test-deployment
kubectl rollout history deployment/test-deployment

kubectl rollout undo deployment/test-deployment --to-revision=4
kubectl rollout status deployment/test-deployment
kubectl rollout history deployment/test-deployment
kubectl describe deployment test-deployment

kubectl rollout restart deployment/test-deployment
kubectl rollout status deployment/test-deployment
#=================================================================================================================
mkdir dep; cd dep

nano deployment1-simple.yml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-web-deployment
  labels: 
    app: my-k8s-application
spec:
  selector: 
    matchLabels:
      project: kgb
  template:
    metadata:
      labels:
        project: kgb
    spec:
      containers:
        - name: kgb-web
          image: adv4000/k8sphp:version1
          ports:
            - containerPort: 80
#------------------------------------------------------------------

kubectl apply -f deployment1-simple.yml
kubectl get deploy
#------------------------------------------------------------------
nano deployment2-replicas.yml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-web-deployment-replicas
  labels:
    app: my-k8s-application
    env: prod
    owner: admin
spec:
  replicas: 3
  selector:
    matchLabels:
      project: rep  
  template:
    metadata:
      labels:
        project: rep
    spec:
      containers:
        - name: rep-web
          image: adv4000/k8sphp:version1
          ports:
            - containerPort: 80
#------------------------------------------------------------------
kubectl apply -f deployment2-replicas.yml
kubectl get deploy

kubectl get pods
kubectl port-forward my-web-deployment-7d9fd6dbdd-drhnj 7788:80
#------------------------------------------------------------------
#меняем версию image
nano deployment2-replicas.yml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-web-deployment-replicas
  labels:
    app: my-k8s-application
    env: prod
    owner: admin
spec:
  replicas: 3
  selector:
    matchLabels:
      project: rep  
  template:
    metadata:
      labels:
        project: rep
    spec:
      containers:
        - name: rep-web
          image: adv4000/k8sphp:version2
          ports:
            - containerPort: 80
#------------------------------------------------------------------
kubectl apply -f deployment2-replicas.yml
kubectl get deploy

kubectl get pods
kubectl port-forward my-web-deployment-replicas-7c48c55cf-mwjcl 7788:80

nano deployment3-autoscaling.yml

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-web-deployment-autoscaling
  labels:
    app: my-k8s-application
    env: prod
    owner: admin
spec:
  replicas: 2
  selector:
    matchLabels:
      project: scal
  template:
    metadata:
      labels:
        project: scal
    spec:
      containers:
      - name: scal-web
        image: adv4000/k8sphp:version1
        ports:
        - containerPort: 80
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: my-autoscaling
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: my-web-deployment-autoscaling
  minReplicas: 3
  maxReplicas: 6
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
#------------------------------------------------------------------
kubectl get pods
kubectl get deploy
kubectl get hpa
#------------------------------------------------------------------
nano deployment3-autoscaling.yml
#меняем версию в image
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-web-deployment-autoscaling
  labels:
    app: my-k8s-application
    env: prod
    owner: admin
spec:
  replicas: 2
  selector:
    matchLabels:
      project: scal
  template:
    metadata:
      labels:
        project: scal
    spec:
      containers:
      - name: scal-web
        image: adv4000/k8sphp:version2
        ports:
        - containerPort: 80
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: my-autoscaling
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: my-web-deployment-autoscaling
  minReplicas: 3
  maxReplicas: 6
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
#------------------------------------------------------------------
kubectl apply -f deployment3-autoscaling.yml
kubectl get pods
kubectl describe deploy my-web-deployment-autoscaling

kubectl delete -f deployment1-simple.yml 
kubectl delete -f deployment2-replicas.yml 
kubectl delete -f deployment3-autoscaling.yml

kubectl get pods
kubectl delete deployment --all
kubectl get pods























