Docker CLI					|		docker-compose.yml
------------------------------------------------|-------------------------------------------------------------------------------------------------
						|	version: "3.5"
docker run					|	services:
--name web-server				|	  web-server:
-v /opt/web/html:/var/www/html			|	    image: nginx:stabe
-v /opt/web/pics:/var/www/pictures		|	    container_name: mynginx
-e NGINX_HOST=web.example.com			|	    volumes:
-e NGINX_PORT=80				|		- /opt/web/html:/var/www/html
-d						|		- /opt/web/pics:/var/www/pictures
-p 80:80					|	    environment:
-p 443:443					|		- NGINX_HOST=web.example.com
-net webnet					|		- NGINX_PORT=80
nginx:stable					|	    ports:
						|		- "80:80"
						|		- "443:443"
						|	    restart: unless-stopped # always/no/on-failure
						|	
						|	networks:
						|	  default:
						|	    driver: bridge
						|	    name: webnet
---------------------------------------------------------------------------------------------------------------------------------------------------
						|
docker run					|	version: "3.5"
--name app					|	services:
-p 80:80					|	  php-app:
--net appnet					|	    image: php:apache
php:apache					|	    container_name: app
						|	    ports:
docker run					|	      - '80:80'
--name app-postgres				|	    restart: unless-stopped
-e 'POSTGRES_PASSWORD=mypas'			|	    depends_on:
--net appnet					|	      - app-db
postgres					|	      - app-redis
						|	    networks:
docker run					|	      - internet
--name app-redis				|	      - appnet
--net appnet					|	  app-db:
redis						|	    image: postgres
						|	    container_name: app-postgres
						|	    restart: unless-stopped
						|	    environment:
						|	       - 'POSTGRES_PASSWORD=mypas'
						|	    networks:
						|	       - appnet
						|	  app-redis:
						|	    image: redis
						|	    container_name: app-redis
						|	    restart: unless-stopped
						|	    networks:
						|	       - appnet
						|	networks:
						|	  internet:
						|	    name: internet
						|	    driver: bridge
						|	  appnet:
						|	    name: appnet
						|	    driver: bridge
---------------------------------------------------------------------------------------------------------------------------------------------------

#docker run --name mynginx -v /opt/web/html:/var/www/html -v /opt/web/pics:/var/www/pictures -e  NGINX_HOST=web.example.com -e NGINX_PORT=80 \
-d -p 80:80 -p 443:443 --net webnet nginx:stable

version: '3.5'
services:
  web-server:
    image: nginx:stable
    container_name: mynginx
    volumes:
      - '/opt/web/html:/var/www/html'
      - '/opt/web/pics:/var/www/pictures'
      - 'nginx-config:/var/www/config'
    environment:
      - 'NGINX_HOST=web.example.com'
      - 'NGINX_PORT=80'
    ports:
      - '80:80'
      - '443:443'
    restart: unless-stopped
volumes:
  nginx-config:
networks:
  default:
    driver: bridge
    name: webnet
---------------------------------------------------------------------------------------------------------------------------------------------------
# docker run --name app -p 80:80 --net appnet php:apache
# docker run --name app-postgres -e 'POSTGRES_PASSWORD'=mypas --net appnet postgres
# docker run --name app-redis --net appnet redis

version: '3.6'
services:
  php-app:
    image: php:apache
    container_name: app
    ports: 
      - '80:80'
    restart: unless-stopped
    depends_on:
      - app-db
      - app-redis
    networks:
      - internet
      - localnet

  app-db:
    image: postgres
    container_name: app-postgres
    restart: unless-stopped
    environment:
      - 'POSTGRES_PASSWORD=mysecretpassword'
    networks:
      - localnet

  app-redis:
    image: redis
    container_name: app-redis
    restart: unless-stopped
    networks:
      - localnet

networks:
  internet:
    name: internet
    driver: bridge
  localnet:
    name: localnet
    driver: bridge
---------------------------------------------------------------------------------------------------------------------------------------------------

# docker run -p 5005:5005 -v /path/to/data:/app/data -e PASSWORD=flame_password flame

version: '3.5'
services:
  flame:
    image: pawelmalak/flame
    container_name: flame
    ports:
      - '5005:5005'
    volumes:
      - '/path/to/data:/app/data'
    environment:
      - 'PASSWORD=password123'
    restart: unless-stopped

  heimdall:
    image: lscr.io/linuxserver/heimdall:latest
    container_name: heimdall
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Moscow
    volumes:
      - /opt/hemdall/config/:/config
    ports:
      - 80:80
      - 443:443
    restart: unless-stopped
---------------------------------------------------------------------------------------------------------------------------------------------------
version: '3.5'

volumes:
  nextcloud:
  db:

services:
  db:
    image: mariadb:10.5
    restart: always
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
    volumes:
      - db:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=pass123
      - MYSQL_PASSWORD=passnextcloud
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud

  app:
    image: nextcloud
    restart: always
    ports:
      - 8080:80
    volumes:
      - nextcloud:/var/www/html
    environment:
      - MYSQL_PASSWORD=passnextcloud
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
      - MYSQL_HOST=db
---------------------------------------------------------------------------------------------------------------------------------------------------
version: '3.5'
services:
  wordpress:
    image: wordpress
    restart: always
    ports:
      - 8080:80
    environment:
      WORDPRESS_DB_HOST: db
      WORDPRESS_DB_USER: exampleuser
      WORDPRESS_DB_PASSWORD: examplepass
      WORDPRESS_DB_NAME: exampledb
    volumes:
      - wordpress:/var/www/html

  db:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: exampledb
      MYSQL_USER: exampleuser
      MYSQL_PASSWORD: examplepass
      MYSQL_ROOT_PASSWORD: 'rootdbpass'
    volumes:
      - db:/var/lib/mysql

volumes:
  wordpress:
  db:
---------------------------------------------------------------------------------------------------------------------------------------------------
version: '3'
services:
 db:
   container_name: postgres_container
   image: postgres
   restart: always
   environment:
     POSTGRES_DB: postgres
     POSTGRES_USER: admin
     POSTGRES_PASSWORD: secret
     PGDATA: /var/lib/postgresql/data
   ports:
     - "5432:5432"
   volumes:
     - db-data:/var/lib/postgresql/data

 pgadmin:
   container_name: pgadmin4_container
   image: dpage/pgadmin4
   restart: always
   environment:
     PGADMIN_DEFAULT_EMAIL: admin@admin.com
     PGADMIN_DEFAULT_PASSWORD: secret
     PGADMIN_LISTEN_PORT: 80
   ports:
     - "8080:80"
   volumes:
     - pgadmin-data:/var/lib/pgadmin
volumes:
 db-data:
 pgadmin-data:






































